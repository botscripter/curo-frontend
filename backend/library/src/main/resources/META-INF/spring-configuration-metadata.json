{
  "groups": [
    {
      "name": "curo",
      "type": "ch.umb.curo.starter.property.CuroProperties",
      "sourceType": "ch.umb.curo.starter.property.CuroProperties"
    },
    {
      "name": "curo.auth",
      "type": "ch.umb.curo.starter.property.CuroAuthProperties",
      "sourceType": "ch.umb.curo.starter.property.CuroProperties",
      "sourceMethod": "getAuth()"
    },
    {
      "name": "curo.auth.basic",
      "type": "ch.umb.curo.starter.property.CuroBasicAuthProperties",
      "sourceType": "ch.umb.curo.starter.property.CuroAuthProperties",
      "sourceMethod": "getBasic()"
    },
    {
      "name": "curo.auth.oauth2",
      "type": "ch.umb.curo.starter.property.CuroOAuth2Properties",
      "sourceType": "ch.umb.curo.starter.property.CuroAuthProperties",
      "sourceMethod": "getOauth2()"
    },
    {
      "name": "curo.auth.oauth2.user-federation",
      "type": "ch.umb.curo.starter.property.CuroUserFederationProperties",
      "sourceType": "ch.umb.curo.starter.property.CuroOAuth2Properties",
      "sourceMethod": "getUserFederation()"
    },
    {
      "name": "curo.flow-to-next",
      "type": "ch.umb.curo.starter.property.CuroFlowToNextProperties",
      "sourceType": "ch.umb.curo.starter.property.CuroProperties",
      "sourceMethod": "getFlowToNext()"
    }
  ],
  "properties": [
    {
      "name": "curo.auth.basic.secure-only-session-cookie",
      "type": "java.lang.Boolean",
      "description": "Only send session cookie over SSL",
      "sourceType": "ch.umb.curo.starter.property.CuroBasicAuthProperties"
    },
    {
      "name": "curo.auth.basic.session-cookie-name",
      "type": "java.lang.String",
      "description": "Session cookie name",
      "sourceType": "ch.umb.curo.starter.property.CuroBasicAuthProperties"
    },
    {
      "name": "curo.auth.basic.session-timeout",
      "type": "java.time.Duration",
      "description": "Specifies the time, in seconds, between client requests before the servlet container will invalidate this session. A zero or negative time indicates that the session should never timeout.",
      "sourceType": "ch.umb.curo.starter.property.CuroBasicAuthProperties"
    },
    {
      "name": "curo.auth.basic.use-session-cookie",
      "type": "java.lang.Boolean",
      "description": "Should basic auth allow session cookies",
      "sourceType": "ch.umb.curo.starter.property.CuroBasicAuthProperties"
    },
    {
      "name": "curo.auth.oauth2.allowed-issuers",
      "type": "java.util.ArrayList<java.lang.String>",
      "description": "Allowed issuer (iss)",
      "sourceType": "ch.umb.curo.starter.property.CuroOAuth2Properties"
    },
    {
      "name": "curo.auth.oauth2.jwk-url",
      "type": "java.lang.String",
      "description": "JWK Url to use for signature checking",
      "sourceType": "ch.umb.curo.starter.property.CuroOAuth2Properties"
    },
    {
      "name": "curo.auth.oauth2.print-errors-to-log",
      "type": "java.lang.Boolean",
      "description": "Print warnings for wrong tokens and verification failures",
      "sourceType": "ch.umb.curo.starter.property.CuroOAuth2Properties"
    },
    {
      "name": "curo.auth.oauth2.user-federation.create-non-existing-groups",
      "type": "java.lang.Boolean",
      "description": "Create non existing jwt groups in camunda",
      "sourceType": "ch.umb.curo.starter.property.CuroUserFederationProperties"
    },
    {
      "name": "curo.auth.oauth2.user-federation.create-non-existing-users",
      "type": "java.lang.Boolean",
      "description": "Defines if Curo create non existing users in Camunda",
      "sourceType": "ch.umb.curo.starter.property.CuroUserFederationProperties"
    },
    {
      "name": "curo.auth.oauth2.user-federation.email-claim",
      "type": "java.lang.String",
      "description": "Claim which is used for email",
      "sourceType": "ch.umb.curo.starter.property.CuroUserFederationProperties"
    },
    {
      "name": "curo.auth.oauth2.user-federation.enabled",
      "type": "java.lang.Boolean",
      "description": "Defines if Curo user federation is active",
      "sourceType": "ch.umb.curo.starter.property.CuroUserFederationProperties"
    },
    {
      "name": "curo.auth.oauth2.user-federation.first-name-claim",
      "type": "java.lang.String",
      "description": "Claim which is used for firstname",
      "sourceType": "ch.umb.curo.starter.property.CuroUserFederationProperties"
    },
    {
      "name": "curo.auth.oauth2.user-federation.group-claim",
      "type": "java.lang.String",
      "description": "Claim which is used for groups if loadGroupFromRoles is disabled",
      "sourceType": "ch.umb.curo.starter.property.CuroUserFederationProperties"
    },
    {
      "name": "curo.auth.oauth2.user-federation.last-name-claim",
      "type": "java.lang.String",
      "description": "Claim which is used for lastname",
      "sourceType": "ch.umb.curo.starter.property.CuroUserFederationProperties"
    },
    {
      "name": "curo.auth.oauth2.user-federation.load-group-from-roles",
      "type": "java.lang.Boolean",
      "description": "Defines if Curo map roles to groups. If not, Curo will use the groupClaim to load a list of groups",
      "sourceType": "ch.umb.curo.starter.property.CuroUserFederationProperties"
    },
    {
      "name": "curo.auth.oauth2.user-federation.print-non-existing-groups",
      "type": "java.lang.Boolean",
      "description": "Defines if Curo should log non existing jwt groups",
      "sourceType": "ch.umb.curo.starter.property.CuroUserFederationProperties"
    },
    {
      "name": "curo.auth.oauth2.user-federation.resource-access-claim",
      "type": "java.lang.String",
      "description": "Claim which is used for resource access",
      "sourceType": "ch.umb.curo.starter.property.CuroUserFederationProperties"
    },
    {
      "name": "curo.auth.oauth2.user-federation.resource-name",
      "type": "java.lang.String",
      "description": "Defines the resource from the the roles are used if loadGroupFromRoles is enabled",
      "sourceType": "ch.umb.curo.starter.property.CuroUserFederationProperties"
    },
    {
      "name": "curo.auth.oauth2.user-federation.revoke-camunda-admin-group",
      "type": "java.lang.Boolean",
      "description": "Revoke the camunda-admin group from users even if they don't have this group in their JWT",
      "sourceType": "ch.umb.curo.starter.property.CuroUserFederationProperties"
    },
    {
      "name": "curo.auth.oauth2.user-id-claim",
      "type": "java.lang.String",
      "description": "Claim which is used to check against Camunda (user id) Common claims: email, preferred_username",
      "sourceType": "ch.umb.curo.starter.property.CuroOAuth2Properties"
    },
    {
      "name": "curo.auth.oauth2.verify-jwt",
      "type": "java.lang.Boolean",
      "description": "Should Curo check the signature against the defined public key",
      "sourceType": "ch.umb.curo.starter.property.CuroOAuth2Properties"
    },
    {
      "name": "curo.auth.type",
      "type": "java.lang.String",
      "description": "Type of authentication supported by Curo: basic, oauth2",
      "sourceType": "ch.umb.curo.starter.property.CuroAuthProperties"
    },
    {
      "name": "curo.camunda-group-id-pattern",
      "type": "java.lang.String",
      "description": "Shortcut for camunda.bpm.generic-properties.properties.groupResourceWhitelistPattern *Recommended pattern: '[a-zA-Z0-9-.@_]+'*",
      "sourceType": "ch.umb.curo.starter.property.CuroProperties"
    },
    {
      "name": "curo.camunda-telemetry",
      "type": "java.lang.Boolean",
      "description": "If set, Curo will define the camunda telemetry to that value",
      "sourceType": "ch.umb.curo.starter.property.CuroProperties"
    },
    {
      "name": "curo.camunda-user-id-pattern",
      "type": "java.lang.String",
      "description": "Shortcut for camunda.bpm.generic-properties.properties.userResourceWhitelistPattern *If email is used for id please use this pattern: '[a-zA-Z0-9-.@_]+'*",
      "sourceType": "ch.umb.curo.starter.property.CuroProperties"
    },
    {
      "name": "curo.create-initial-filters",
      "type": "java.lang.Boolean",
      "description": "Defines if Curo creates filter during startup.",
      "sourceType": "ch.umb.curo.starter.property.CuroProperties"
    },
    {
      "name": "curo.enable-historic-instance-permissions",
      "type": "java.lang.Boolean",
      "description": "If set, Curo will define the camunda enableHistoricInstancePermissions to that value Since [Camunda 7.13](https:\/\/camunda.com\/blog\/2020\/06\/camunda-bpm-runtime-713-released) historic permissions are disabled by default.",
      "sourceType": "ch.umb.curo.starter.property.CuroProperties"
    },
    {
      "name": "curo.flow-to-next.default-timeout",
      "type": "java.lang.Integer",
      "description": "Default timeout in seconds for flowToNext requests Default: 30s",
      "sourceType": "ch.umb.curo.starter.property.CuroFlowToNextProperties"
    },
    {
      "name": "curo.flow-to-next.ignore-assignee",
      "type": "java.lang.Boolean",
      "description": "Should Curo ignore the assignee for flowToNext requests Default: false",
      "sourceType": "ch.umb.curo.starter.property.CuroFlowToNextProperties"
    },
    {
      "name": "curo.flow-to-next.interval",
      "type": "java.lang.Integer",
      "description": "How long in milliseconds should Curo wait between requests to Camunda if flowToNext got requested Default: 500ms",
      "sourceType": "ch.umb.curo.starter.property.CuroFlowToNextProperties"
    },
    {
      "name": "curo.ignore-object-type",
      "type": "java.lang.Boolean",
      "description": "If active, Curo will override object variables with json value if the new value does not match the object type of the variable.",
      "sourceType": "ch.umb.curo.starter.property.CuroProperties"
    },
    {
      "name": "curo.initial-filter-location",
      "type": "java.lang.String",
      "description": "Location in which Curo searches for initial filter json files.",
      "sourceType": "ch.umb.curo.starter.property.CuroProperties"
    },
    {
      "name": "curo.initial-groups",
      "type": "java.util.List<ch.umb.curo.starter.property.CuroInitialGroupProperty>",
      "description": "Define groups which Curo should create on startup. If group already exists, Curo will not create it again.",
      "sourceType": "ch.umb.curo.starter.property.CuroProperties"
    },
    {
      "name": "curo.initial-users",
      "type": "java.util.ArrayList<ch.umb.curo.starter.property.CuroInitialUserProperty>",
      "description": "Define users which Curo should create on startup. If the user already exists, only the groups are assigned.",
      "sourceType": "ch.umb.curo.starter.property.CuroProperties"
    },
    {
      "name": "curo.print-stacktrace",
      "type": "java.lang.Boolean",
      "description": "Should Curo print stacktraces to the log and rest responses",
      "sourceType": "ch.umb.curo.starter.property.CuroProperties"
    },
    {
      "name": "curo.set-default-serialization-format",
      "type": "java.lang.Boolean",
      "description": "If set, Curo will override the default serialization format to application\/json",
      "sourceType": "ch.umb.curo.starter.property.CuroProperties"
    }
  ],
  "hints": []
}